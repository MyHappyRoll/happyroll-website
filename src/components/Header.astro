---
import BookACallButton from "./BookACallButton.astro";
import Button from "./Button.astro";
---

<style>
  .header {
    margin: calc(1em + 1px) auto 0; visually compensate for the trick
    height: 75px;
    position: sticky;
    top: -1px; trick the observer into seeing a viewport intersection
    transition: all 200ms ease-in-out;
    z-index: 10;
    border-radius: 14px;
    box-shadow: rgba(0, 0, 0, 0.05) 0px 0px 0px 1px;
  }

  .is-stuck {
    width: 100%;
    max-width: 100%;
    border-radius: 0;
    background-color: var(--white);
  }

  .header__inner-wrapper {
    max-width: 60rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin: 0 auto;
  }

  button {
    height: 38px;
    transition: 300ms;
  }

  button:hover {
    background-color: var(--primary-500);
  }

  .logo img {
    width: 8rem;
  }

  .mw-340 {
    max-width: 340px;
  }

  .header__middle {
    transition: 300ms;
  }

  .header__middle .link:hover {
    color: var(--primary-600);
  }

  #menu {
    top: 92px;
  }

  .menu-container {
    height: 25rem;
    box-shadow: rgba(0, 0, 0, 0.05) 0px 0px 0px 1px;
  }

  @media screen and (min-width: 30rem) {
    #menu {
      top: 122px;
    }

    .menu-container {
      height: 35rem;
    }
  }
</style>

<header
  id="site-header"
  class="header w-90 mw8 center pv3 ph3 ph4-ns flex justify-center items-center relative bg-white"
>
  <div class="header__inner-wrapper w-100">
    <a
      href="/"
      class="logo flex items-center no-underline"
      aria-label="Back to homepage"
    >
      <img
        src="/images/h-logo-full.svg"
        alt="HappyRoll Smiling H logo in pink."
      />
    </a>

    <div
      class="header__middle dn flex-l items-center h-100 w-50-l justify-center"
    >
      <nav class="w-100 mw-340">
        <ul class="list pl0 mv0 flex items-center justify-between">
          <li>
            <a href="/pricing/" class="link neutral-800">Pricing</a>
          </li>
          <li>
            <a href="/about/" class="link neutral-800">About</a>
          </li>
          <li>
            <a href="/gallery/" class="link neutral-800">Gallery</a>
          </li>
          <li>
            <a href="/blog/" class="link neutral-800">Blog</a>
          </li>
        </ul>
      </nav>
    </div>
    <div class="header__right flex items-center h-100 justify-end">
      <div class="dn-l">
        <button
          id="menuButton"
          class="br-pill bg-primary-600 white b--neutral-800 ba ph3"
          >Menu</button
        >
      </div>
      <div class="dn db-l">
        <BookACallButton isPinkButton>
      </div>
    </div>
  </div>

  <div id="menu" class="absolute w-100 vh-100 bg-transparent ph3 dn">
    <div class="menu-container bg-white br4 pt3 mw7 center">
      <nav class="h-75 flex items-center w-100">
        <ul
          class="list tc pl0 flex flex-column justify-around h-75 mt0 w-100 mb0"
        >
          <li>
            <a href="/pricing/" class="link neutral-800 f3 f2-ns">Pricing</a>
          </li>
          <li>
            <a href="/about/" class="link neutral-800 f3 f2-ns">About</a>
          </li>
          <li>
            <a href="/gallery/" class="link neutral-800 f3 f2-ns">Gallery</a>
          </li>
          <li>
            <a href="/blog/" class="link neutral-800 f3 f2-ns">Blog</a>
          </li>
        </ul>
      </nav>

      <div class="flex justify-center">
        <BookACallButton isPinkButton>
      </div>
    </div>
  </div>
</header>

<script>
  let menu = document.getElementById("menu");
  let menuButton = document.getElementById("menuButton");

  const header = document.getElementById("site-header");
  // const headerContainer = header?.querySelector('.header-container')
  if (header) {
    const observer = new IntersectionObserver(
      ([e]) => {
        e.target.classList.toggle(
          "is-stuck",
          // is intersecting the top but not the left or right
          e.boundingClientRect.width <= e.intersectionRect.width &&
            e.intersectionRatio < 1
        );
      },
      { threshold: 1 }
    );
    observer.observe(header);
  }

  menuButton?.addEventListener("click", (event) => {
    menu?.classList.contains("dn")
      ? menu.classList.remove("dn")
      : menu?.classList.add("dn");

    if (menu?.classList.contains("dn")) {
      menuButton.innerText = "Menu";
    } else {
      menuButton.innerText = "Close";
    }
  });
</script>

<!-- Cal floating-popup embed code begins -->
<script type="text/javascript">
  (function (C, A, L) { let p = function (a, ar) { a.q.push(ar); }; let d = C.document; C.Cal = C.Cal || function () { let cal = C.Cal; let ar = arguments; if (!cal.loaded) { cal.ns = {}; cal.q = cal.q || []; d.head.appendChild(d.createElement("script")).src = A; cal.loaded = true; } if (ar[0] === L) { const api = function () { p(api, arguments); }; const namespace = ar[1]; api.q = api.q || []; if(typeof namespace === "string"){cal.ns[namespace] = cal.ns[namespace] || api;p(cal.ns[namespace], ar);p(cal, ["initNamespace", namespace]);} else p(cal, ar); return;} p(cal, ar); }; })(window, "https://app.cal.com/embed/embed.js", "init");
Cal("init", "free-consultation", {origin:"https://cal.com"});

  Cal.ns["free-consultation"]("floatingButton", {"calLink":"happyroll/free-consultation","config":{"layout":"month_view"},"buttonText":"Book a call","hideButtonIcon":false,"buttonColor":"#da137d"}); 
  Cal.ns["free-consultation"]("ui", {"styles":{"branding":{"brandColor":"#da137d"}},"hideEventTypeDetails":false,"layout":"month_view"});
  </script>
  <!-- Cal floating-popup embed code ends -->

  <!-- Cal element-click embed code begins -->
<script type="text/javascript">
  (function (C, A, L) { let p = function (a, ar) { a.q.push(ar); }; let d = C.document; C.Cal = C.Cal || function () { let cal = C.Cal; let ar = arguments; if (!cal.loaded) { cal.ns = {}; cal.q = cal.q || []; d.head.appendChild(d.createElement("script")).src = A; cal.loaded = true; } if (ar[0] === L) { const api = function () { p(api, arguments); }; const namespace = ar[1]; api.q = api.q || []; if(typeof namespace === "string"){cal.ns[namespace] = cal.ns[namespace] || api;p(cal.ns[namespace], ar);p(cal, ["initNamespace", namespace]);} else p(cal, ar); return;} p(cal, ar); }; })(window, "https://app.cal.com/embed/embed.js", "init");
Cal("init", "free-consultation", {origin:"https://cal.com"});
  Cal.ns["free-consultation"]("ui", {"styles":{"branding":{"brandColor":"#da137d"}},"hideEventTypeDetails":false,"layout":"month_view"});
  </script>
  <!-- Cal element-click embed code ends -->
</section>
